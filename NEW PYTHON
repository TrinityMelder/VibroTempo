import asyncio
import websockets
import serial
import os
import nest_asyncio
from datetime import datetime

# Apply the patch right after imports
nest_asyncio.apply()

ser = serial.Serial('COM8', 115200, timeout=1)
save_directory = "C:\\Users\\Trinity's Laptop\\Desktop\\Python Recordings"
if not os.path.exists(save_directory):
    os.makedirs(save_directory)

async def handler(websocket, path):
    file = None
    try:
        async for message in websocket:
            print("Received message from client:", message)
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
            if message.startswith("start"):
                if file is not None:
                    file.close()  # Ensure any previous file is closed
                filename = f"session_{current_time.replace(':', '-')}.txt"
                file = open(os.path.join(save_directory, filename), 'w')
                file.write(f"Session started at {current_time}\n")
            elif message == "stop" and file is not None:
                file.write(f"Session stopped at {current_time}\n")
                file.close()
                file = None
            elif "Vibration at beat:" in message and file is not None:
                file.write(f"{current_time} - {message}\n")
            ser.write((message + '\n').encode())
    except websockets.exceptions.ConnectionClosed:
        print("WebSocket connection closed by client")
        if file:
            file.close()

async def main():
    async with websockets.serve(handler, "localhost", 8765):
        await asyncio.Future()  # Run forever

asyncio.run(main())
